CFile(f, classes, main) ::= <<
#include \<stdio.h>
#include \<stdlib.h>

typedef struct {
    char *name;
    int size;
    void (*(*_vtable)[])();
} metadata;

typedef struct {
    metadata *clazz;
} object;

object *alloc(metadata *clazz) {
    object *p = calloc(1, clazz->size); // wipe to 0s
    p->clazz = clazz;
    return p;
}

<classes>

<main>
>>

ClassDef(class, fields, methods, vtable) ::= <<



// D e f i n e  C l a s s  <class.name>
typedef struct {
    metadata *clazz;
    <fields; separator="\n">
} <class.name>;

<class.methods:{ m | #define <class.name>_<m.funcName>_SLOT <i0>}; separator="\n">


<methods; separator="\n">
void (*<class.name>_vtable[])() = {
    <class.methods:{ m | (void (*)())&<class.name>_<m.funcName>}; separator=",\n">
};

metadata <class.name>_metadata = {"<class.name>", sizeof(<class.name>), &<class.name>_vtable};
>>

MethodDef(m,funcName,returnType,args,body) ::= <<
<m.returnType> <m.className>_<m.funcName>(<args; separator=", ">)
{
    <body>
}
>>

MainMethod(main,funcName,returnType,args,body) ::= <<

int main(int argc, char *argv[])
{
    <body>
    return 0;
}
>>

Block(block, locals, instrs) ::= <<
<if(locals)>
<locals; separator="\n">

<endif>
<instrs; separator="\n">
>>

VarDef(var, type)   ::= <<
<type><if(var.type.isPrimitive || !var.isParameter)> <endif><var.name><if(!var.isParameter)>;<endif>
>>

FuncName(f)         ::= ""

ObjectTypeSpec(o)   ::= ""
PrimitiveTypeSpec(p)::= "<p.name>"

AssignStat(a,left,right) ::= "<left> = <right>;"
PrintStringStat(p)  ::= "printf(<p.formattedString>);"
PrintStat(p,args)   ::= "printf(<p.formattedString>, <args; separator=\", \">);"
CallStat(c,call)    ::= "<call>"
CtorCall(ctor)      ::= "((<ctor.className> *)alloc(&<ctor.className>_metadata))"
ReturnStat(r,expr)  ::= "return <expr>;"
WhileStat(w,condition, stat) ::= <<
while ( <condition> ) {
    <stat>
}
>>
IfStat(i,condition, stat) ::= "if ( <condition> ) <stat>"
IfElseStat(i,condition, stat, elseStat) ::= <<
if ( <condition> ) <stat>
else <elseStat>
>>

NullRef(n)          ::= "NULL"

LiteralRef(lit)     ::= "<lit.literal>"
VarRef(v)           ::= "<v.variable>"
FieldRef(f, object) ::= "<object>-><f.field>"
ThisRef(t)          ::= "this"
MethodCall(m, receiver, receiverType, fptrType, args) ::= <<
(<fptrType>(*(<receiver>)->clazz->_vtable)[<m.receiverType.name>_<m.name>_SLOT])(<args; separator=",">);
>>

FuncPtrType(f, returnType, argTypes) ::= "*(<returnType> (*)(<argTypes; separator=\",\">))"
TypeCast(cast, type, expr) ::= "((<type>)<expr>)"
DataType(type) ::= "<type.name><if(!type.isPrimitive)> *<endif>"
